1c002098ffab6d15d994d8d584fa9274
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var filesystem_sandbox_1 = require("filesystem-sandbox");
var faker = __importStar(require("faker"));
var repository_1 = require("./repository");
var exec_1 = require("../src/exec");
var path = __importStar(require("path"));
var os = __importStar(require("os"));
var fs_1 = require("fs");
describe("git-broadcast-cli", function () {
    it("should do the expected work with provided args", function () { return __awaiter(void 0, void 0, void 0, function () {
        var sandbox, featureBranch, readmeContents, updatedContents, initialMessage, updatedMessage, originPath, localPath, origin, local, currentContents, tsNodePath, log;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, filesystem_sandbox_1.Sandbox.create()];
                case 1:
                    sandbox = _a.sent(), featureBranch = "feature/stuff", readmeContents = "initial: " + faker.random.words(), updatedContents = "updated: " + faker.random.words(), initialMessage = ":tada: initial commit", updatedMessage = ":memo: prior docs are all wrong!";
                    return [4 /*yield*/, sandbox.mkdir("origin")];
                case 2:
                    originPath = _a.sent();
                    return [4 /*yield*/, sandbox.mkdir("local")];
                case 3:
                    localPath = _a.sent(), origin = repository_1.Repository.create(originPath);
                    return [4 /*yield*/, origin.init()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", readmeContents)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(initialMessage)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", updatedContents)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(updatedMessage)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, origin.checkout("master")];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, repository_1.Repository.clone(originPath, localPath)];
                case 10:
                    local = _a.sent();
                    return [4 /*yield*/, local.fetch()];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, local.resetHard("HEAD~1")];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, local.checkout("-b", featureBranch)];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, sandbox.readTextFile("local/readme.md")];
                case 14:
                    currentContents = _a.sent();
                    expect(currentContents)
                        .toEqual(readmeContents); // should have readme reset
                    return [4 /*yield*/, findTsNode()];
                case 15:
                    tsNodePath = _a.sent();
                    // Act
                    return [4 /*yield*/, exec_1.exec(tsNodePath, [
                            path.resolve(path.join(__dirname, "..", "src", "git-broadcast-cli.ts")),
                            "-i", localPath,
                            "--from", "master",
                            "--to", featureBranch
                        ])
                        // Assert
                    ];
                case 16:
                    // Act
                    _a.sent();
                    // Assert
                    return [4 /*yield*/, local.checkout(featureBranch)];
                case 17:
                    // Assert
                    _a.sent();
                    return [4 /*yield*/, local.log()];
                case 18:
                    log = _a.sent();
                    expect(log.latest.message)
                        .toEqual(updatedMessage);
                    return [2 /*return*/];
            }
        });
    }); });
    function findTsNode() {
        return __awaiter(this, void 0, void 0, function () {
            var packageDir, nodeModulesBin, stub, result, st, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        packageDir = path.dirname(__dirname), nodeModulesBin = path.join(packageDir, "node_modules", ".bin"), stub = os.platform() === "win32" ? "ts-node.cmd" : "ts-node", result = path.join(nodeModulesBin, stub);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fs_1.promises.stat(result)];
                    case 2:
                        st = _a.sent();
                        if (!st || !st.isFile()) {
                            throw new Error("ts-node not found at: \"" + result + "\"");
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error("ts-node not found at: \"" + result + "\"");
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQzpcXGNvZGVcXG9wZW5zb3VyY2VcXGdpdC1icm9hZGNhc3RcXHRlc3RzXFxnaXQtYnJvYWRjYXN0LWNsaS5zcGVjLnRzIiwic291cmNlcyI6WyJDOlxcY29kZVxcb3BlbnNvdXJjZVxcZ2l0LWJyb2FkY2FzdFxcdGVzdHNcXGdpdC1icm9hZGNhc3QtY2xpLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseURBQTZDO0FBQzdDLDJDQUErQjtBQUMvQiwyQ0FBMEM7QUFDMUMsb0NBQW1DO0FBQ25DLHlDQUE2QjtBQUM3QixxQ0FBeUI7QUFDekIseUJBQW9DO0FBRXBDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtJQUMxQixFQUFFLENBQUMsZ0RBQWdELEVBQUU7Ozs7d0JBR25DLHFCQUFNLDRCQUFPLENBQUMsTUFBTSxFQUFFLEVBQUE7O29CQUFoQyxPQUFPLEdBQUcsU0FBc0IsRUFDaEMsYUFBYSxHQUFHLGVBQWUsRUFDL0IsY0FBYyxHQUFHLGNBQWEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUssRUFDckQsZUFBZSxHQUFHLGNBQWEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUssRUFDdEQsY0FBYyxHQUFHLHVCQUF1QixFQUN4QyxjQUFjLEdBQUcsa0NBQWtDO29CQUN0QyxxQkFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFBOztvQkFBMUMsVUFBVSxHQUFHLFNBQTZCO29CQUM5QixxQkFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFBOztvQkFBeEMsU0FBUyxHQUFHLFNBQTRCLEVBQ3hDLE1BQU0sR0FBRyx1QkFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7b0JBQzFDLHFCQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBQTs7b0JBQW5CLFNBQW1CLENBQUM7b0JBQ3BCLHFCQUFNLE9B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QUN4RDs7Ozt3QkFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUEwQixNQUFNLE9BQUcsQ0FBQyxDQUFDOzRCQUV6RCxzQkFBTyxNQUFNLEVBQUM7Ozs7S0FDakI7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNhbmRib3ggfSBmcm9tIFwiZmlsZXN5c3RlbS1zYW5kYm94XCI7XHJcbmltcG9ydCAqIGFzIGZha2VyIGZyb20gXCJmYWtlclwiO1xyXG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSBcIi4vcmVwb3NpdG9yeVwiO1xyXG5pbXBvcnQgeyBleGVjIH0gZnJvbSBcIi4uL3NyYy9leGVjXCI7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0ICogYXMgb3MgZnJvbSBcIm9zXCI7XHJcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSBcImZzXCI7XHJcblxyXG5kZXNjcmliZShgZ2l0LWJyb2FkY2FzdC1jbGlgLCAoKSA9PiB7XHJcbiAgICBpdChgc2hvdWxkIGRvIHRoZSBleHBlY3RlZCB3b3JrIHdpdGggcHJvdmlkZWQgYXJnc2AsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyBBcnJhbmdlXHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgc2FuZGJveCA9IGF3YWl0IFNhbmRib3guY3JlYXRlKCksXHJcbiAgICAgICAgICAgIGZlYXR1cmVCcmFuY2ggPSBcImZlYXR1cmUvc3R1ZmZcIixcclxuICAgICAgICAgICAgcmVhZG1lQ29udGVudHMgPSBgaW5pdGlhbDogJHsgZmFrZXIucmFuZG9tLndvcmRzKCkgfWAsXHJcbiAgICAgICAgICAgIHVwZGF0ZWRDb250ZW50cyA9IGB1cGRhdGVkOiAkeyBmYWtlci5yYW5kb20ud29yZHMoKSB9YCxcclxuICAgICAgICAgICAgaW5pdGlhbE1lc3NhZ2UgPSBcIjp0YWRhOiBpbml0aWFsIGNvbW1pdFwiLFxyXG4gICAgICAgICAgICB1cGRhdGVkTWVzc2FnZSA9IFwiOm1lbW86IHByaW9yIGRvY3MgYXJlIGFsbCB3cm9uZyFcIixcclxuICAgICAgICAgICAgb3JpZ2luUGF0aCA9IGF3YWl0IHNhbmRib3gubWtkaXIoXCJvcmlnaW5cIiksXHJcbiAgICAgICAgICAgIGxvY2FsUGF0aCA9IGF3YWl0IHNhbmRib3gubWtkaXIoXCJsb2NhbFwiKSxcclxuICAgICAgICAgICAgb3JpZ2luID0gUmVwb3NpdG9yeS5jcmVhdGUob3JpZ2luUGF0aCk7XHJcbiAgICAgICAgYXdhaXQgb3JpZ2luLmluaXQoKTtcclxuICAgICAgICBhd2FpdCBzYW5kYm94LndyaXRlRmlsZShcIm9yaWdpbi9yZWFkbWUubWRcIiwgcmVhZG1lQ29udGVudHMpO1xyXG4gICAgICAgIGF3YWl0IG9yaWdpbi5jb21taXRBbGwoaW5pdGlhbE1lc3NhZ2UpO1xyXG4gICAgICAgIGF3YWl0IHNhbmRib3gud3JpdGVGaWxlKFwib3JpZ2luL3JlYWRtZS5tZFwiLCB1cGRhdGVkQ29udGVudHMpO1xyXG4gICAgICAgIGF3YWl0IG9yaWdpbi5jb21taXRBbGwodXBkYXRlZE1lc3NhZ2UpO1xyXG4gICAgICAgIGF3YWl0IG9yaWdpbi5jaGVja291dChcIm1hc3RlclwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgbG9jYWwgPSBhd2FpdCBSZXBvc2l0b3J5LmNsb25lKG9yaWdpblBhdGgsIGxvY2FsUGF0aCk7XHJcbiAgICAgICAgYXdhaXQgbG9jYWwuZmV0Y2goKTtcclxuICAgICAgICBhd2FpdCBsb2NhbC5yZXNldEhhcmQoXCJIRUFEfjFcIik7XHJcbiAgICAgICAgYXdhaXQgbG9jYWwuY2hlY2tvdXQoXCItYlwiLCBmZWF0dXJlQnJhbmNoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY3VycmVudENvbnRlbnRzID0gYXdhaXQgc2FuZGJveC5yZWFkVGV4dEZpbGUoXCJsb2NhbC9yZWFkbWUubWRcIik7XHJcbiAgICAgICAgZXhwZWN0KGN1cnJlbnRDb250ZW50cylcclxuICAgICAgICAgICAgLnRvRXF1YWwocmVhZG1lQ29udGVudHMpOyAvLyBzaG91bGQgaGF2ZSByZWFkbWUgcmVzZXRcclxuXHJcbiAgICAgICAgY29uc3QgdHNOb2RlUGF0aCA9IGF3YWl0IGZpbmRUc05vZGUoKTtcclxuXHJcbiAgICAgICAgLy8gQWN0XHJcbiAgICAgICAgYXdhaXQgZXhlYyhcclxuICAgICAgICAgICAgdHNOb2RlUGF0aCwgW1xyXG4gICAgICAgICAgICAgICAgcGF0aC5yZXNvbHZlKHBhdGguam9pbihfX2Rpcm5hbWUsIFwiLi5cIiwgXCJzcmNcIiwgXCJnaXQtYnJvYWRjYXN0LWNsaS50c1wiKSksXHJcbiAgICAgICAgICAgICAgICBcIi1pXCIsIGxvY2FsUGF0aCxcclxuICAgICAgICAgICAgICAgIFwiLS1mcm9tXCIsIFwibWFzdGVyXCIsXHJcbiAgICAgICAgICAgICAgICBcIi0tdG9cIiwgZmVhdHVyZUJyYW5jaFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC8vIEFzc2VydFxyXG4gICAgICAgIGF3YWl0IGxvY2FsLmNoZWNrb3V0KGZlYXR1cmVCcmFuY2gpO1xyXG4gICAgICAgIGNvbnN0IGxvZyA9IGF3YWl0IGxvY2FsLmxvZygpO1xyXG4gICAgICAgIGV4cGVjdChsb2cubGF0ZXN0Lm1lc3NhZ2UpXHJcbiAgICAgICAgICAgIC50b0VxdWFsKHVwZGF0ZWRNZXNzYWdlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGZpbmRUc05vZGUoKSB7XHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgcGFja2FnZURpciA9IHBhdGguZGlybmFtZShfX2Rpcm5hbWUpLFxyXG4gICAgICAgICAgICBub2RlTW9kdWxlc0JpbiA9IHBhdGguam9pbihwYWNrYWdlRGlyLCBcIm5vZGVfbW9kdWxlc1wiLCBcIi5iaW5cIiksXHJcbiAgICAgICAgICAgIHN0dWIgPSBvcy5wbGF0Zm9ybSgpID09PSBcIndpbjMyXCIgPyBcInRzLW5vZGUuY21kXCIgOiBcInRzLW5vZGVcIixcclxuICAgICAgICAgICAgcmVzdWx0ID0gcGF0aC5qb2luKG5vZGVNb2R1bGVzQmluLCBzdHViKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBzdCA9IGF3YWl0IGZzLnN0YXQocmVzdWx0KTtcclxuICAgICAgICAgICAgaWYgKCFzdCB8fCAhc3QuaXNGaWxlKCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdHMtbm9kZSBub3QgZm91bmQgYXQ6IFwiJHtyZXN1bHR9XCJgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0cy1ub2RlIG5vdCBmb3VuZCBhdDogXCIke3Jlc3VsdH1cImApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59KTtcclxuIl19