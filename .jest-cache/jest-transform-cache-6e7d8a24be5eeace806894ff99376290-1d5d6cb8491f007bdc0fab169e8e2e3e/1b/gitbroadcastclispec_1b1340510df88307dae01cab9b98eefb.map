{"version":3,"file":"C:\\code\\opensource\\git-broadcast\\tests\\git-broadcast-cli.spec.ts","sources":["C:\\code\\opensource\\git-broadcast\\tests\\git-broadcast-cli.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Sandbox } from \"filesystem-sandbox\";\r\nimport * as faker from \"faker\";\r\nimport { Repository } from \"./repository\";\r\nimport { exec } from \"../src/exec\";\r\nimport * as path from \"path\";\r\nimport * as os from \"os\";\r\nimport { promises as fs } from \"fs\";\r\n\r\ndescribe(`git-broadcast-cli`, () => {\r\n    it(`should do the expected work with provided args`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = await Sandbox.create(),\r\n            featureBranch = \"feature/stuff\",\r\n            readmeContents = `initial: ${ faker.random.words() }`,\r\n            updatedContents = `updated: ${ faker.random.words() }`,\r\n            initialMessage = \":tada: initial commit\",\r\n            updatedMessage = \":memo: prior docs are all wrong!\",\r\n            originPath = await sandbox.mkdir(\"origin\"),\r\n            localPath = await sandbox.mkdir(\"local\"),\r\n            origin = Repository.create(originPath);\r\n        await origin.init();\r\n        await sandbox.writeFile(\"origin/readme.md\", readmeContents);\r\n        await origin.commitAll(initialMessage);\r\n        await sandbox.writeFile(\"origin/readme.md\", updatedContents);\r\n        await origin.commitAll(updatedMessage);\r\n        await origin.checkout(\"master\");\r\n\r\n        const local = await Repository.clone(originPath, localPath);\r\n        await local.fetch();\r\n        await local.resetHard(\"HEAD~1\");\r\n        await local.checkout(\"-b\", featureBranch);\r\n\r\n        const currentContents = await sandbox.readTextFile(\"local/readme.md\");\r\n        expect(currentContents)\r\n            .toEqual(readmeContents); // should have readme reset\r\n\r\n        const tsNodePath = await findTsNode();\r\n\r\n        // Act\r\n        await exec(\r\n            tsNodePath, [\r\n                path.resolve(path.join(__dirname, \"..\", \"src\", \"git-broadcast-cli.ts\")),\r\n                \"-i\", localPath,\r\n                \"--from\", \"master\",\r\n                \"--to\", featureBranch\r\n            ]\r\n        )\r\n        // Assert\r\n        await local.checkout(featureBranch);\r\n        const log = await local.log();\r\n        expect(log.latest.message)\r\n            .toEqual(updatedMessage);\r\n    });\r\n\r\n    async function findTsNode() {\r\n        const\r\n            packageDir = path.dirname(__dirname),\r\n            nodeModulesBin = path.join(packageDir, \"node_modules\", \".bin\"),\r\n            stub = os.platform() === \"win32\" ? \"ts-node.cmd\" : \"ts-node\",\r\n            result = path.join(nodeModulesBin, stub);\r\n        try {\r\n            const st = await fs.stat(result);\r\n            if (!st || !st.isFile()) {\r\n                throw new Error(`ts-node not found at: \"${result}\"`);\r\n            }\r\n        } catch (e) {\r\n            throw new Error(`ts-node not found at: \"${result}\"`);\r\n        }\r\n        return result;\r\n    }\r\n});\r\n"]}