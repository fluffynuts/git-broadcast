c21dea9111bf9a713f10c38a881abe8a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("expect-even-more-jest");
var filesystem_sandbox_1 = require("filesystem-sandbox");
var faker = __importStar(require("faker"));
var git_broadcast_1 = require("../src/git-broadcast");
var repository_1 = require("./repository");
describe("git-broadcast", function () {
    beforeEach(function () {
        // we're doing fs-ops here, give things a little more
        // time (though they generally won't need it)
        jest.setTimeout(60000);
    });
    it("should broadcast to a single receiver from the default source", function () { return __awaiter(void 0, void 0, void 0, function () {
        var sandbox, featureBranch, readmeContents, updatedContents, initialMessage, updatedMessage, originPath, localPath, origin, local, currentContents, log;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, filesystem_sandbox_1.Sandbox.create()];
                case 1:
                    sandbox = _a.sent(), featureBranch = "feature/stuff", readmeContents = "initial: " + faker.random.words(), updatedContents = "updated: " + faker.random.words(), initialMessage = ":tada: initial commit", updatedMessage = ":memo: prior docs are all wrong!";
                    return [4 /*yield*/, sandbox.mkdir("origin")];
                case 2:
                    originPath = _a.sent();
                    return [4 /*yield*/, sandbox.mkdir("local")];
                case 3:
                    localPath = _a.sent(), origin = repository_1.Repository.create(originPath);
                    return [4 /*yield*/, origin.init()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", readmeContents)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(initialMessage)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", updatedContents)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(updatedMessage)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, origin.checkout("master")];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, repository_1.Repository.clone(originPath, localPath)];
                case 10:
                    local = _a.sent();
                    return [4 /*yield*/, local.fetch()];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, local.resetHard("HEAD~1")];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, local.checkout("-b", featureBranch)];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, sandbox.readTextFile("local/readme.md")];
                case 14:
                    currentContents = _a.sent();
                    expect(currentContents)
                        .toEqual(readmeContents); // should have readme reset
                    // Act
                    return [4 /*yield*/, git_broadcast_1.gitBroadcast({
                            in: localPath,
                            to: [featureBranch]
                        })
                        // Assert
                    ];
                case 15:
                    // Act
                    _a.sent();
                    // Assert
                    return [4 /*yield*/, local.checkout(featureBranch)];
                case 16:
                    // Assert
                    _a.sent();
                    return [4 /*yield*/, local.log()];
                case 17:
                    log = _a.sent();
                    expect(log.latest.message)
                        .toEqual(updatedMessage);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should broadcast to a globbed single receiver from the default source", function () { return __awaiter(void 0, void 0, void 0, function () {
        var sandbox, featureBranch, readmeContents, updatedContents, initialMessage, updatedMessage, originPath, localPath, origin, local, currentContents, log;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, filesystem_sandbox_1.Sandbox.create()];
                case 1:
                    sandbox = _a.sent(), featureBranch = "feature/stuff", readmeContents = "initial: " + faker.random.words(), updatedContents = "updated: " + faker.random.words(), initialMessage = ":tada: initial commit", updatedMessage = ":memo: prior docs are all wrong!";
                    return [4 /*yield*/, sandbox.mkdir("origin")];
                case 2:
                    originPath = _a.sent();
                    return [4 /*yield*/, sandbox.mkdir("local")];
                case 3:
                    localPath = _a.sent(), origin = repository_1.Repository.create(originPath);
                    return [4 /*yield*/, origin.init()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", readmeContents)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(initialMessage)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", updatedContents)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(updatedMessage)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, origin.checkout("master")];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, repository_1.Repository.clone(originPath, localPath)];
                case 10:
                    local = _a.sent();
                    return [4 /*yield*/, local.fetch()];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, local.resetHard("HEAD~1")];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, local.checkout("-b", featureBranch)];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, sandbox.readTextFile("local/readme.md")];
                case 14:
                    currentContents = _a.sent();
                    expect(currentContents)
                        .toEqual(readmeContents); // should have readme reset
                    // Act
                    return [4 /*yield*/, git_broadcast_1.gitBroadcast({
                            in: localPath,
                            to: ["feature/*"]
                        })
                        // Assert
                    ];
                case 15:
                    // Act
                    _a.sent();
                    // Assert
                    return [4 /*yield*/, local.checkout(featureBranch)];
                case 16:
                    // Assert
                    _a.sent();
                    return [4 /*yield*/, local.log()];
                case 17:
                    log = _a.sent();
                    expect(log.latest.message)
                        .toEqual(updatedMessage);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should broadcast to a globbed single receiver from the specified source", function () { return __awaiter(void 0, void 0, void 0, function () {
        var sandbox, featureBranch, readmeContents, updatedContents, initialMessage, updatedMessage, originPath, localPath, origin, local, currentContents, log;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, filesystem_sandbox_1.Sandbox.create()];
                case 1:
                    sandbox = _a.sent(), featureBranch = "feature/stuff", readmeContents = "initial: " + faker.random.words(), updatedContents = "updated: " + faker.random.words(), initialMessage = ":tada: initial commit", updatedMessage = ":memo: prior docs are all wrong!";
                    return [4 /*yield*/, sandbox.mkdir("origin")];
                case 2:
                    originPath = _a.sent();
                    return [4 /*yield*/, sandbox.mkdir("local")];
                case 3:
                    localPath = _a.sent(), origin = repository_1.Repository.create(originPath);
                    return [4 /*yield*/, origin.init()];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", readmeContents)];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(initialMessage)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, sandbox.writeFile("origin/readme.md", updatedContents)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, origin.commitAll(updatedMessage)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, origin.checkout("master")];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, repository_1.Repository.clone(originPath, localPath)];
                case 10:
                    local = _a.sent();
                    return [4 /*yield*/, local.fetch()];
                case 11:
                    _a.sent();
                    return [4 /*yield*/, local.resetHard("HEAD~1")];
                case 12:
                    _a.sent();
                    return [4 /*yield*/, local.checkout("-b", featureBranch)];
                case 13:
                    _a.sent();
                    return [4 /*yield*/, sandbox.readTextFile("local/readme.md")];
                case 14:
                    currentContents = _a.sent();
                    expect(currentContents)
                        .toEqual(readmeContents); // should have readme reset
                    // Act
                    return [4 /*yield*/, git_broadcast_1.gitBroadcast({
                            in: localPath,
                            from: "master",
                            to: ["feature/*"]
                        })
                        // Assert
                    ];
                case 15:
                    // Act
                    _a.sent();
                    // Assert
                    return [4 /*yield*/, local.checkout(featureBranch)];
                case 16:
                    // Assert
                    _a.sent();
                    return [4 /*yield*/, local.log()];
                case 17:
                    log = _a.sent();
                    expect(log.latest.message)
                        .toEqual(updatedMessage);
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, filesystem_sandbox_1.Sandbox.destroyAll()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,