{"version":3,"file":"C:\\code\\opensource\\git-broadcast\\tests\\git-broadcast.spec.ts","sources":["C:\\code\\opensource\\git-broadcast\\tests\\git-broadcast.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import \"expect-even-more-jest\";\r\nimport { Sandbox } from \"filesystem-sandbox\";\r\nimport * as faker from \"faker\";\r\nimport { gitBroadcast } from \"../src/git-broadcast\";\r\nimport { Repository } from \"./repository\";\r\n\r\ndescribe(`git-broadcast`, () => {\r\n    beforeEach(() => {\r\n        // we're doing fs-ops here, give things a little more\r\n        // time (though they generally won't need it)\r\n        jest.setTimeout(60000);\r\n    });\r\n    it(`should broadcast to a single receiver from the default source`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = await Sandbox.create(),\r\n            featureBranch = \"feature/stuff\",\r\n            readmeContents = `initial: ${faker.random.words()}`,\r\n            updatedContents = `updated: ${faker.random.words()}`,\r\n            initialMessage = \":tada: initial commit\",\r\n            updatedMessage = \":memo: prior docs are all wrong!\",\r\n            originPath = await sandbox.mkdir(\"origin\"),\r\n            localPath = await sandbox.mkdir(\"local\"),\r\n            origin = Repository.create(originPath);\r\n        await origin.init();\r\n        await sandbox.writeFile(\"origin/readme.md\", readmeContents);\r\n        await origin.commitAll(initialMessage);\r\n        await sandbox.writeFile(\"origin/readme.md\", updatedContents);\r\n        await origin.commitAll(updatedMessage);\r\n        await origin.checkout(\"master\");\r\n\r\n        const local = await Repository.clone(originPath, localPath);\r\n        await local.fetch();\r\n        await local.resetHard(\"HEAD~1\");\r\n        await local.checkout(\"-b\", featureBranch);\r\n\r\n        const currentContents = await sandbox.readTextFile(\"local/readme.md\");\r\n        expect(currentContents)\r\n            .toEqual(readmeContents); // should have readme reset\r\n        // Act\r\n        await gitBroadcast({\r\n            in: localPath,\r\n            to: [ featureBranch ]\r\n        })\r\n        // Assert\r\n        await local.checkout(featureBranch);\r\n        const log = await local.log();\r\n        expect(log.latest.message)\r\n            .toEqual(updatedMessage);\r\n    });\r\n\r\n    it(`should broadcast to a globbed single receiver from the default source`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = await Sandbox.create(),\r\n            featureBranch = \"feature/stuff\",\r\n            readmeContents = `initial: ${faker.random.words()}`,\r\n            updatedContents = `updated: ${faker.random.words()}`,\r\n            initialMessage = \":tada: initial commit\",\r\n            updatedMessage = \":memo: prior docs are all wrong!\",\r\n            originPath = await sandbox.mkdir(\"origin\"),\r\n            localPath = await sandbox.mkdir(\"local\"),\r\n            origin = Repository.create(originPath);\r\n        await origin.init();\r\n        await sandbox.writeFile(\"origin/readme.md\", readmeContents);\r\n        await origin.commitAll(initialMessage);\r\n        await sandbox.writeFile(\"origin/readme.md\", updatedContents);\r\n        await origin.commitAll(updatedMessage);\r\n        await origin.checkout(\"master\");\r\n\r\n        const local = await Repository.clone(originPath, localPath);\r\n        await local.fetch();\r\n        await local.resetHard(\"HEAD~1\");\r\n        await local.checkout(\"-b\", featureBranch);\r\n\r\n        const currentContents = await sandbox.readTextFile(\"local/readme.md\");\r\n        expect(currentContents)\r\n            .toEqual(readmeContents); // should have readme reset\r\n        // Act\r\n        await gitBroadcast({\r\n            in: localPath,\r\n            to: [ \"feature/*\" ]\r\n        })\r\n        // Assert\r\n        await local.checkout(featureBranch);\r\n        const log = await local.log();\r\n        expect(log.latest.message)\r\n            .toEqual(updatedMessage);\r\n    });\r\n\r\n    it(`should broadcast to a globbed single receiver from the specified source`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = await Sandbox.create(),\r\n            featureBranch = \"feature/stuff\",\r\n            readmeContents = `initial: ${faker.random.words()}`,\r\n            updatedContents = `updated: ${faker.random.words()}`,\r\n            initialMessage = \":tada: initial commit\",\r\n            updatedMessage = \":memo: prior docs are all wrong!\",\r\n            originPath = await sandbox.mkdir(\"origin\"),\r\n            localPath = await sandbox.mkdir(\"local\"),\r\n            origin = Repository.create(originPath);\r\n        await origin.init();\r\n        await sandbox.writeFile(\"origin/readme.md\", readmeContents);\r\n        await origin.commitAll(initialMessage);\r\n        await sandbox.writeFile(\"origin/readme.md\", updatedContents);\r\n        await origin.commitAll(updatedMessage);\r\n        await origin.checkout(\"master\");\r\n\r\n        const local = await Repository.clone(originPath, localPath);\r\n        await local.fetch();\r\n        await local.resetHard(\"HEAD~1\");\r\n        await local.checkout(\"-b\", featureBranch);\r\n\r\n        const currentContents = await sandbox.readTextFile(\"local/readme.md\");\r\n        expect(currentContents)\r\n            .toEqual(readmeContents); // should have readme reset\r\n        // Act\r\n        await gitBroadcast({\r\n            in: localPath,\r\n            from: \"master\",\r\n            to: [ \"feature/*\" ]\r\n        })\r\n        // Assert\r\n        await local.checkout(featureBranch);\r\n        const log = await local.log();\r\n        expect(log.latest.message)\r\n            .toEqual(updatedMessage);\r\n    });\r\n\r\n    afterEach(async () => await Sandbox.destroyAll());\r\n});\r\n"]}