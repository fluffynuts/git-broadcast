{"version":3,"file":"C:\\code\\opensource\\git-broadcast\\tests\\repository.spec.ts","sources":["C:\\code\\opensource\\git-broadcast\\tests\\repository.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iCAA+B;AAC/B,yDAA6C;AAC7C,2CAA0C;AAC1C,yCAA6B;AAE7B,QAAQ,CAAC,yBAAyB,EAAE;IAChC,EAAE,CAAC,wBAAwB,EAAE;;;;;oBAGrB,OAAO,GAAG,IAAI,4BAAO,EAAE;oBACjB,qBAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oBAAnC,GAAG,GAAG,SAA6B,EACnC,IAAI,GAAG,IAAI,uBAAU,CAAC,GAAG,CAAC;oBAC9B,MAAM;oBACN,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBADjB,MAAM;oBACN,SAAiB,CAAC;oBAClB,SAAS;oBACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;yBACzB,UAAU,EAAE,CAAA;;;;SACpB,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE;;;;;oBAG/B,OAAO,GAAG,IAAI,4BAAO,EAAE;oBACjB,qBAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAA;;oBAAnC,GAAG,GAAG,SAA6B,EACnC,aAAa,GAAG,gBAAgB,EAChC,IAAI,GAAG,IAAI,uBAAU,CAAC,GAAG,CAAC;oBAC9B,MAAM;oBACN,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;oBADjB,MAAM;oBACN,SAAiB,CAAC;oBAClB,qBAAM,OAAO,CAAC,SAAS,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,EAAA;;oBAAnE,SAAmE,CAAC;oBACpE,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;oBAAnB,SAAmB,CAAC;oBACC,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;oBAAlC,YAAY,GAAG,SAAmB;oBACxC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;yBACrB,cAAc,CAAC,MAAM,CAAC,gBAAgB,CAAC;wBACpC,IAAI,EAAE,WAAW;qBACpB,CAAC,CAAC,CAAC;oBACR,qBAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAA;;oBAAhC,SAAgC,CAAC;oBAGlB,qBAAM,IAAI,CAAC,MAAM,EAAE,EAAA;;oBAA5B,MAAM,GAAG,SAAmB;oBAClC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;yBACf,cAAc,EAAE,CAAC;oBACJ,qBAAM,IAAI,CAAC,GAAG,CAAC,EAEhC,CAAC,EAAA;;oBAFI,SAAS,GAAG,SAEhB;oBACF,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;yBAChB,YAAY,CAAC,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;yBACnB,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC;wBAC7B,OAAO,EAAE,aAAa;qBACzB,CAAC,CAAC,CAAC;;;;SACX,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import \"expect-even-more-jest\";\r\nimport { Sandbox } from \"filesystem-sandbox\";\r\nimport { Repository } from \"./repository\";\r\nimport * as path from \"path\";\r\n\r\ndescribe(`test repository wrapper`, () => {\r\n    it(`should be able to init`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = new Sandbox(),\r\n            dir = await sandbox.mkdir(\"origin\"),\r\n            repo = new Repository(dir);\r\n        // Act\r\n        await repo.init();\r\n        // Assert\r\n        expect(path.join(dir, \".git\"))\r\n            .toBeFolder()\r\n    });\r\n\r\n    it(`should be able to add and commit`, async () => {\r\n        // Arrange\r\n        const\r\n            sandbox = new Sandbox(),\r\n            dir = await sandbox.mkdir(\"origin\"),\r\n            commitMessage = \":memo: add doc\",\r\n            repo = new Repository(dir)\r\n        // Act\r\n        await repo.init();\r\n        await sandbox.writeFile(\"origin/readme.md\", \"# This is the readme\");\r\n        await repo.addAll();\r\n        const beforeCommit = await repo.status();\r\n        expect(beforeCommit.files)\r\n            .toContainEqual(expect.objectContaining({\r\n                path: \"readme.md\"\r\n            }));\r\n        await repo.commit(commitMessage);\r\n\r\n        // Assert\r\n        const result = await repo.status();\r\n        expect(result.files)\r\n            .toBeEmptyArray();\r\n        const logResult = await repo.log({\r\n\r\n        });\r\n        expect(logResult.all)\r\n            .toHaveLength(1);\r\n        expect(logResult.latest)\r\n            .toEqual(expect.objectContaining({\r\n                message: commitMessage\r\n            }));\r\n    });\r\n});\r\n"]}