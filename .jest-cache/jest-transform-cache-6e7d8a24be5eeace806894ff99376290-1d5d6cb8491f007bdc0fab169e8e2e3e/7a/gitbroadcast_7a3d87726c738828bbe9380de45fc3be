a7adf34cc9e8b20c39d0970e90debe35
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitBroadcast = void 0;
var exec_1 = require("./exec");
var defaultOptions = {
    from: undefined,
    to: ["*"],
    ignoreMissingBranches: false
};
var currentBranchRe = /^\*\s/;
function gitBroadcast(providedOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var opts;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    opts = __assign(__assign({}, defaultOptions), providedOptions);
                    return [4 /*yield*/, runIn(opts.in, function () { return __awaiter(_this, void 0, void 0, function () {
                            var startBranch, _a, _i, _b, to, allTargets, _c, allTargets_1, target;
                            return __generator(this, function (_d) {
                                switch (_d.label) {
                                    case 0: return [4 /*yield*/, findCurrentBranch()];
                                    case 1:
                                        startBranch = _d.sent();
                                        if (!!opts.from) return [3 /*break*/, 3];
                                        _a = opts;
                                        return [4 /*yield*/, findBestMaster()];
                                    case 2:
                                        _a.from = _d.sent();
                                        return [3 /*break*/, 6];
                                    case 3: return [4 /*yield*/, gitCheckout(opts.from)];
                                    case 4:
                                        _d.sent();
                                        return [4 /*yield*/, git("pull", "--rebase")];
                                    case 5:
                                        _d.sent();
                                        _d.label = 6;
                                    case 6:
                                        _i = 0, _b = (opts.to || []);
                                        _d.label = 7;
                                    case 7:
                                        if (!(_i < _b.length)) return [3 /*break*/, 14];
                                        to = _b[_i];
                                        return [4 /*yield*/, matchBranches(to)];
                                    case 8:
                                        allTargets = _d.sent();
                                        if (allTargets.length === 0) {
                                            if (opts.ignoreMissingBranches) {
                                                return [3 /*break*/, 13];
                                            }
                                            throw new Error("Can't match branch spec '" + to + "'");
                                        }
                                        _c = 0, allTargets_1 = allTargets;
                                        _d.label = 9;
                                    case 9:
                                        if (!(_c < allTargets_1.length)) return [3 /*break*/, 13];
                                        target = allTargets_1[_c];
                                        return [4 /*yield*/, gitCheckout(target)];
                                    case 10:
                                        _d.sent();
                                        return [4 /*yield*/, gitMerge(opts.from)];
                                    case 11:
                                        _d.sent();
                                        _d.label = 12;
                                    case 12:
                                        _c++;
                                        return [3 /*break*/, 9];
                                    case 13:
                                        _i++;
                                        return [3 /*break*/, 7];
                                    case 14:
                                        if (!startBranch) return [3 /*break*/, 16];
                                        return [4 /*yield*/, gitCheckout(startBranch)];
                                    case 15:
                                        _d.sent();
                                        _d.label = 16;
                                    case 16: return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.gitBroadcast = gitBroadcast;
function gitCheckout(branch) {
    return git("checkout", branch);
}
function gitMerge(branch) {
    return git("merge", branch);
}
function git() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return exec_1.exec("git", args);
}
function runIn(dir, action) {
    return __awaiter(this, void 0, void 0, function () {
        var start;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    start = process.cwd();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 3, 4]);
                    if (dir) {
                        process.chdir(dir);
                    }
                    return [4 /*yield*/, action()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    process.chdir(start);
                    return [7 /*endfinally*/];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function findBestMaster() {
    return __awaiter(this, void 0, void 0, function () {
        var listing, withoutRemotesPrefix, originMaster, master;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, matchBranches("*master")];
                case 1:
                    listing = _a.sent();
                    withoutRemotesPrefix = listing
                        .map(function (l) { return l.replace(/^remotes\//, ""); });
                    originMaster = withoutRemotesPrefix.find(function (l) { return l === "origin/master"; });
                    if (originMaster) {
                        return [2 /*return*/, originMaster];
                    }
                    master = withoutRemotesPrefix.find(function (l) { return l === "master"; });
                    if (master) {
                        return [2 /*return*/, master];
                    }
                    throw new Error("Can't automatically determine which branch to broadcast from (tried origin/master, master). Please specify a from branch.");
            }
        });
    });
}
function findCurrentBranch() {
    return __awaiter(this, void 0, void 0, function () {
        var all, current;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, listBranchesRaw()];
                case 1:
                    all = _a.sent(), current = all.find(function (a) { return a.startsWith("*"); });
                    return [2 /*return*/, current
                            ? current.replace(currentBranchRe, "")
                            : current];
            }
        });
    });
}
function listBranchesRaw(spec) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!spec) {
                        spec = "*";
                    }
                    return [4 /*yield*/, git("branch", "-a", "--list", spec)];
                case 1: return [2 /*return*/, (_a.sent()).stdout];
            }
        });
    });
}
function matchBranches(spec) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, listBranchesRaw(spec)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.map(
                        // remove the "current branch" marker
                        function (line) { return line.replace(currentBranchRe, ""); }).map(function (line) { return line.trim(); })];
            }
        });
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,