{"version":3,"file":"C:\\code\\opensource\\git-broadcast\\src\\git-broadcast.ts","sources":["C:\\code\\opensource\\git-broadcast\\src\\git-broadcast.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, ProcessResult } from \"./exec\";\r\n\r\nexport interface BroadcastOptions {\r\n    in?: string;\r\n    from?: string;\r\n    to?: string[],\r\n    ignoreMissingBranches?: boolean;\r\n}\r\n\r\nconst defaultOptions: BroadcastOptions = {\r\n    from: undefined,\r\n    to: [\"*\"],\r\n    ignoreMissingBranches: false\r\n}\r\n\r\nconst currentBranchRe = /^\\*\\s/;\r\n\r\ntype AsyncAction = (() => Promise<any>);\r\n\r\nexport async function gitBroadcast(\r\n    providedOptions: BroadcastOptions) {\r\n    const opts = {\r\n        ...defaultOptions,\r\n        ...providedOptions\r\n    }\r\n    await runIn(opts.in, async () => {\r\n        const startBranch = await findCurrentBranch();\r\n        if (!opts.from) {\r\n            opts.from = await findBestMaster();\r\n        } else {\r\n            await gitCheckout(opts.from);\r\n            await git(\"pull\", \"--rebase\");\r\n        }\r\n        for (const to of (opts.to || [])) {\r\n            const allTargets = await matchBranches(to);\r\n            if (allTargets.length === 0) {\r\n                if (opts.ignoreMissingBranches) {\r\n                    continue;\r\n                }\r\n                throw new Error(`Can't match branch spec '${ to }'`);\r\n            }\r\n            for (const target of allTargets) {\r\n                await gitCheckout(target);\r\n                await gitMerge(opts.from);\r\n            }\r\n        }\r\n        if (startBranch) {\r\n            await gitCheckout(startBranch);\r\n        }\r\n    });\r\n}\r\n\r\nfunction gitCheckout(branch: string): Promise<ProcessResult> {\r\n    return git(\"checkout\", branch);\r\n}\r\nfunction gitMerge(branch: string): Promise<ProcessResult> {\r\n    return git(\"merge\", branch);\r\n}\r\nfunction git(...args: string[]): Promise<ProcessResult> {\r\n    return exec(\"git\", args);\r\n}\r\n\r\nasync function runIn(\r\n    dir: string | undefined,\r\n    action: AsyncAction) {\r\n    const start = process.cwd();\r\n    try {\r\n        if (dir) {\r\n            process.chdir(dir);\r\n        }\r\n        await action();\r\n    } finally {\r\n        process.chdir(start);\r\n    }\r\n}\r\n\r\nasync function findBestMaster() {\r\n    const listing = await matchBranches(\"*master\");\r\n    const withoutRemotesPrefix = listing\r\n        .map(\r\n            l => l.replace(/^remotes\\//, \"\")\r\n        );\r\n    const originMaster = withoutRemotesPrefix.find(l => l === \"origin/master\")\r\n    if (originMaster) {\r\n        return originMaster;\r\n    }\r\n    const master = withoutRemotesPrefix.find(l => l === \"master\");\r\n    if (master) {\r\n        return master;\r\n    }\r\n    throw new Error(\r\n        `Can't automatically determine which branch to broadcast from (tried origin/master, master). Please specify a from branch.`\r\n    )\r\n}\r\n\r\nasync function findCurrentBranch(): Promise<string | undefined> {\r\n    const\r\n        all = await listBranchesRaw(),\r\n        current = all.find(a => a.startsWith(\"*\"));\r\n    return current\r\n        ? current.replace(currentBranchRe, \"\")\r\n        : current;\r\n}\r\n\r\nasync function listBranchesRaw(spec?: string): Promise<string[]> {\r\n    if (!spec) {\r\n        spec = \"*\";\r\n    }\r\n    return (\r\n        await git(\"branch\", \"-a\", \"--list\", spec)\r\n    ).stdout;\r\n}\r\n\r\nasync function matchBranches(spec: string): Promise<string[]> {\r\n    const result = await listBranchesRaw(spec);\r\n    return result.map(\r\n        // remove the \"current branch\" marker\r\n        line => line.replace(currentBranchRe, \"\")\r\n    ).map(line => line.trim());\r\n}\r\n"]}