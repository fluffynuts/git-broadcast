{"version":3,"file":"C:\\code\\opensource\\git-broadcast\\tests\\repository.ts","sources":["C:\\code\\opensource\\git-broadcast\\tests\\repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommitSummary, LogOptions, SimpleGit, StatusResult } from \"simple-git/promise\";\r\nimport * as path from \"path\";\r\nimport GitFactory = require(\"simple-git/promise\");\r\n\r\nexport class Repository {\r\n    public get fullpath() {\r\n        return this._fullpath;\r\n    }\r\n\r\n    private get git(): SimpleGit {\r\n        if (!this._git) {\r\n            this._git = GitFactory(this._fullpath)\r\n        }\r\n        return this._git as SimpleGit;\r\n    }\r\n\r\n    private _git: SimpleGit | undefined;\r\n\r\n    constructor(private _fullpath: string) {\r\n    }\r\n\r\n    public init(): Promise<void> {\r\n        return this.git.init(false);\r\n    }\r\n\r\n    public checkout(...args: string[]) {\r\n        return this.git.checkout(args);\r\n    }\r\n\r\n    public reset(...args: string[]) {\r\n        return this.git.reset(args);\r\n    }\r\n\r\n    public resetHard(where: string) {\r\n        return this.reset(\"--hard\", where);\r\n    }\r\n\r\n    public async createBranch(andCheckOut: boolean = true): Promise<void> {\r\n        // TODO\r\n        // - create the branch\r\n        // - check it out\r\n    }\r\n\r\n    public status(): Promise<StatusResult> {\r\n        return this.git.status();\r\n    }\r\n\r\n    public log(options?: LogOptions) {\r\n        return this.git.log(options);\r\n    }\r\n\r\n    public fetch() {\r\n        return this.git.fetch();\r\n    }\r\n\r\n    public async addAll(): Promise<void> {\r\n        const status = await this.git.status();\r\n        for (let f of status.files) {\r\n            await this.git.add(f.path);\r\n        }\r\n    }\r\n\r\n    public async commitAll(message: string): Promise<CommitSummary> {\r\n        await this.addAll();\r\n        return this.commit(message);\r\n    }\r\n    public commit(message: string): Promise<CommitSummary> {\r\n        return this.git.commit(message);\r\n    }\r\n\r\n    public static async clone(\r\n        srcPath: string,\r\n        targetPath: string): Promise<Repository> {\r\n        const git = GitFactory(\".\");\r\n        await git.clone(srcPath, targetPath);\r\n        return new Repository(targetPath);\r\n    }\r\n\r\n    public static create(at: string) {\r\n        return new Repository(path.resolve(at));\r\n    }\r\n}\r\n"]}